import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { useForm } from 'react-hook-form';
import SaveIcon from '@mui/icons-material/Save';
import Button from '@mui/material/Button';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import axios from 'axios';
import { toast } from 'react-toastify';
import TextField from '@mui/material/TextField';
import MenuItem from '@mui/material/MenuItem';
import InputLabel from '@mui/material/InputLabel';
import FormControl from '@mui/material/FormControl';
import Select, { SelectChangeEvent } from '@mui/material/Select'

const schema = z.object({
  name: z.string().nonempty('Name is required'),
  image: z.string().nonempty('Image is required'),
  kg: z.string().nonempty('Kg is required'),
  price: z.string().nonempty('Price is required'),
  description: z.string().nonempty('Description is required'),
  _id: z.string().nonempty('Type is required'),
});

export default function CreateType() {
  const router = useRouter();
  const [data, setData] = useState([]);
  const [type, setType] = React.useState('');

  const handleChange = (event: SelectChangeEvent) => {
    setType(event.target.value);
  };
  
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(schema),
  });

  const handleSaveType = async (data:any) => {
    try {
      await axios.post('http://localhost:9000/Products',data);
      toast.success('Product created successfully');
      router.push('/shop');
    } catch (error) {
      console.error(error);
      toast.error('Product error');
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const result = await axios.get('http://localhost:9000/type');
      setData(result.data);
    } catch (error) {
      console.error('There was an error fetching the data:', error);
    }
  };

  return (
    <>
      <main>
        <h1>Add Product</h1>
        <form onSubmit={handleSubmit(handleSaveType)}>
          <TextField
            id="name"
            name="name"
            label="Name"
            variant="outlined"
            {...register('name')}
            error={!!errors.name}
            helperText={errors.name?.message}
          />
          <TextField
            id="image"
            name="image"
            label="Image"
            variant="outlined"
            {...register('image')}
            error={!!errors.image}
            helperText={errors.image?.message}
          />
          <TextField
            id="kg"
            name="kg"
            label="Kg"
            variant="outlined"
            {...register('kg')}
            error={!!errors.kg}
            helperText={errors.kg?.message}
          />
          <TextField
            id="price"
            name="price"
            label="Price"
            variant="outlined"
            {...register('price')}
            error={!!errors.price}
            helperText={errors.price?.message}
          />
          <TextField
            id="description"
            name="description"
            label="Description"
            variant="outlined"
            {...register('description')}
            error={!!errors.description}
            helperText={errors.description?.message}
          />
          <TextField
            id="type"
            name="type"
            label="type"
            variant="outlined"
            {...register('type')}
            error={!!errors.type}
            helperText={errors.type?.message}
          />
          {/* <FormControl variant="standard" sx={{ m: 1, minWidth: 120 }}>
            <InputLabel id="demo-simple-select-standard-label">Type</InputLabel>
            <Select
              labelId="demo-simple-select-standard-label"
              id="demo-simple-select-standard"
              value={type}
              onChange={handleChange}
              label="type"
            >
              {data.map((item) => (
                <MenuItem key={item._id} value={item._id}>{item.name}</MenuItem>
              ))}
            </Select>
          </FormControl> */}
          <Button variant="outlined" startIcon={<SaveIcon />} type="submit">
            Save
          </Button>
        </form>
      </main>
    </>
  );
}
